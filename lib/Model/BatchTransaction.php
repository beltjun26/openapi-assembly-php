<?php
/**
 * BatchTransaction
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BatchTransaction Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class BatchTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'batch_transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'status' => 'string',
        'uuid' => 'string',
        'disbursement_bank' => 'string',
        'processing_bank' => 'string',
        'external_reference' => 'string',
        'reference_amount' => 'string',
        'internal_state' => 'string',
        'internal_status' => 'string',
        'account_external' => '\OpenAPI\Client\Model\BatchTransactionAccountExternal',
        'external_account_details' => 'string',
        'external_account_details_encrypted' => 'bool',
        'marketplace' => '\OpenAPI\Client\Model\BatchTransactionMarketplace',
        'first_name' => 'string',
        'last_name' => 'string',
        'user_email' => 'string',
        'user_external_id' => 'string',
        'legal_entity_id' => 'string',
        'phone' => 'string',
        'payout_currency' => 'string',
        'type' => 'string',
        'type_method' => 'string',
        'batch_id' => 'int',
        'cuscal_payment_transaction_id' => 'string',
        'reference' => 'string',
        'state' => 'string',
        'user_id' => 'string',
        'account_id' => 'string',
        'account_type' => 'string',
        'from_user_name' => 'string',
        'from_user_id' => 'string',
        'refund_state' => 'string',
        'amount' => 'int',
        'currency' => 'string',
        'company' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'address_city' => 'string',
        'address_state' => 'string',
        'address_postcode' => 'string',
        'address_country' => '\OpenAPI\Client\Model\BatchTransactionAddressCountry',
        'country' => 'string',
        'debit_credit' => 'string',
        'description' => 'string',
        'item' => '\OpenAPI\Client\Model\BatchTransactionItem',
        'deposit_reference' => 'string',
        'related' => '\OpenAPI\Client\Model\BatchTransactionRelated',
        'links' => '\OpenAPI\Client\Model\BatchTransactionLinks'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'status' => null,
        'uuid' => null,
        'disbursement_bank' => null,
        'processing_bank' => null,
        'external_reference' => null,
        'reference_amount' => null,
        'internal_state' => null,
        'internal_status' => null,
        'account_external' => null,
        'external_account_details' => null,
        'external_account_details_encrypted' => null,
        'marketplace' => null,
        'first_name' => null,
        'last_name' => null,
        'user_email' => null,
        'user_external_id' => null,
        'legal_entity_id' => null,
        'phone' => null,
        'payout_currency' => null,
        'type' => null,
        'type_method' => null,
        'batch_id' => null,
        'cuscal_payment_transaction_id' => null,
        'reference' => null,
        'state' => null,
        'user_id' => null,
        'account_id' => null,
        'account_type' => null,
        'from_user_name' => null,
        'from_user_id' => null,
        'refund_state' => null,
        'amount' => null,
        'currency' => null,
        'company' => null,
        'address_line1' => null,
        'address_line2' => null,
        'address_city' => null,
        'address_state' => null,
        'address_postcode' => null,
        'address_country' => null,
        'country' => null,
        'debit_credit' => null,
        'description' => null,
        'item' => null,
        'deposit_reference' => null,
        'related' => null,
        'links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'status' => 'status',
        'uuid' => 'uuid',
        'disbursement_bank' => 'disbursement_bank',
        'processing_bank' => 'processing_bank',
        'external_reference' => 'external_reference',
        'reference_amount' => 'reference_amount',
        'internal_state' => 'internal_state',
        'internal_status' => 'internal_status',
        'account_external' => 'account_external',
        'external_account_details' => 'external_account_details',
        'external_account_details_encrypted' => 'external_account_details_encrypted',
        'marketplace' => 'marketplace',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'user_email' => 'user_email',
        'user_external_id' => 'user_external_id',
        'legal_entity_id' => 'legal_entity_id',
        'phone' => 'phone',
        'payout_currency' => 'payout_currency',
        'type' => 'type',
        'type_method' => 'type_method',
        'batch_id' => 'batch_id',
        'cuscal_payment_transaction_id' => 'cuscal_payment_transaction_id',
        'reference' => 'reference',
        'state' => 'state',
        'user_id' => 'user_id',
        'account_id' => 'account_id',
        'account_type' => 'account_type',
        'from_user_name' => 'from_user_name',
        'from_user_id' => 'from_user_id',
        'refund_state' => 'refund_state',
        'amount' => 'amount',
        'currency' => 'currency',
        'company' => 'company',
        'address_line1' => 'address_line1',
        'address_line2' => 'address_line2',
        'address_city' => 'address_city',
        'address_state' => 'address_state',
        'address_postcode' => 'address_postcode',
        'address_country' => 'address_country',
        'country' => 'country',
        'debit_credit' => 'debit_credit',
        'description' => 'description',
        'item' => 'item',
        'deposit_reference' => 'deposit_reference',
        'related' => 'related',
        'links' => 'links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'status' => 'setStatus',
        'uuid' => 'setUuid',
        'disbursement_bank' => 'setDisbursementBank',
        'processing_bank' => 'setProcessingBank',
        'external_reference' => 'setExternalReference',
        'reference_amount' => 'setReferenceAmount',
        'internal_state' => 'setInternalState',
        'internal_status' => 'setInternalStatus',
        'account_external' => 'setAccountExternal',
        'external_account_details' => 'setExternalAccountDetails',
        'external_account_details_encrypted' => 'setExternalAccountDetailsEncrypted',
        'marketplace' => 'setMarketplace',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'user_email' => 'setUserEmail',
        'user_external_id' => 'setUserExternalId',
        'legal_entity_id' => 'setLegalEntityId',
        'phone' => 'setPhone',
        'payout_currency' => 'setPayoutCurrency',
        'type' => 'setType',
        'type_method' => 'setTypeMethod',
        'batch_id' => 'setBatchId',
        'cuscal_payment_transaction_id' => 'setCuscalPaymentTransactionId',
        'reference' => 'setReference',
        'state' => 'setState',
        'user_id' => 'setUserId',
        'account_id' => 'setAccountId',
        'account_type' => 'setAccountType',
        'from_user_name' => 'setFromUserName',
        'from_user_id' => 'setFromUserId',
        'refund_state' => 'setRefundState',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'company' => 'setCompany',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'address_city' => 'setAddressCity',
        'address_state' => 'setAddressState',
        'address_postcode' => 'setAddressPostcode',
        'address_country' => 'setAddressCountry',
        'country' => 'setCountry',
        'debit_credit' => 'setDebitCredit',
        'description' => 'setDescription',
        'item' => 'setItem',
        'deposit_reference' => 'setDepositReference',
        'related' => 'setRelated',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'status' => 'getStatus',
        'uuid' => 'getUuid',
        'disbursement_bank' => 'getDisbursementBank',
        'processing_bank' => 'getProcessingBank',
        'external_reference' => 'getExternalReference',
        'reference_amount' => 'getReferenceAmount',
        'internal_state' => 'getInternalState',
        'internal_status' => 'getInternalStatus',
        'account_external' => 'getAccountExternal',
        'external_account_details' => 'getExternalAccountDetails',
        'external_account_details_encrypted' => 'getExternalAccountDetailsEncrypted',
        'marketplace' => 'getMarketplace',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'user_email' => 'getUserEmail',
        'user_external_id' => 'getUserExternalId',
        'legal_entity_id' => 'getLegalEntityId',
        'phone' => 'getPhone',
        'payout_currency' => 'getPayoutCurrency',
        'type' => 'getType',
        'type_method' => 'getTypeMethod',
        'batch_id' => 'getBatchId',
        'cuscal_payment_transaction_id' => 'getCuscalPaymentTransactionId',
        'reference' => 'getReference',
        'state' => 'getState',
        'user_id' => 'getUserId',
        'account_id' => 'getAccountId',
        'account_type' => 'getAccountType',
        'from_user_name' => 'getFromUserName',
        'from_user_id' => 'getFromUserId',
        'refund_state' => 'getRefundState',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'company' => 'getCompany',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'address_city' => 'getAddressCity',
        'address_state' => 'getAddressState',
        'address_postcode' => 'getAddressPostcode',
        'address_country' => 'getAddressCountry',
        'country' => 'getCountry',
        'debit_credit' => 'getDebitCredit',
        'description' => 'getDescription',
        'item' => 'getItem',
        'deposit_reference' => 'getDepositReference',
        'related' => 'getRelated',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['uuid'] = $data['uuid'] ?? null;
        $this->container['disbursement_bank'] = $data['disbursement_bank'] ?? null;
        $this->container['processing_bank'] = $data['processing_bank'] ?? null;
        $this->container['external_reference'] = $data['external_reference'] ?? null;
        $this->container['reference_amount'] = $data['reference_amount'] ?? null;
        $this->container['internal_state'] = $data['internal_state'] ?? null;
        $this->container['internal_status'] = $data['internal_status'] ?? null;
        $this->container['account_external'] = $data['account_external'] ?? null;
        $this->container['external_account_details'] = $data['external_account_details'] ?? null;
        $this->container['external_account_details_encrypted'] = $data['external_account_details_encrypted'] ?? null;
        $this->container['marketplace'] = $data['marketplace'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['user_email'] = $data['user_email'] ?? null;
        $this->container['user_external_id'] = $data['user_external_id'] ?? null;
        $this->container['legal_entity_id'] = $data['legal_entity_id'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['payout_currency'] = $data['payout_currency'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['type_method'] = $data['type_method'] ?? null;
        $this->container['batch_id'] = $data['batch_id'] ?? null;
        $this->container['cuscal_payment_transaction_id'] = $data['cuscal_payment_transaction_id'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['account_type'] = $data['account_type'] ?? null;
        $this->container['from_user_name'] = $data['from_user_name'] ?? null;
        $this->container['from_user_id'] = $data['from_user_id'] ?? null;
        $this->container['refund_state'] = $data['refund_state'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['company'] = $data['company'] ?? null;
        $this->container['address_line1'] = $data['address_line1'] ?? null;
        $this->container['address_line2'] = $data['address_line2'] ?? null;
        $this->container['address_city'] = $data['address_city'] ?? null;
        $this->container['address_state'] = $data['address_state'] ?? null;
        $this->container['address_postcode'] = $data['address_postcode'] ?? null;
        $this->container['address_country'] = $data['address_country'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['debit_credit'] = $data['debit_credit'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['item'] = $data['item'] ?? null;
        $this->container['deposit_reference'] = $data['deposit_reference'] ?? null;
        $this->container['related'] = $data['related'] ?? null;
        $this->container['links'] = $data['links'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets disbursement_bank
     *
     * @return string|null
     */
    public function getDisbursementBank()
    {
        return $this->container['disbursement_bank'];
    }

    /**
     * Sets disbursement_bank
     *
     * @param string|null $disbursement_bank disbursement_bank
     *
     * @return self
     */
    public function setDisbursementBank($disbursement_bank)
    {
        $this->container['disbursement_bank'] = $disbursement_bank;

        return $this;
    }

    /**
     * Gets processing_bank
     *
     * @return string|null
     */
    public function getProcessingBank()
    {
        return $this->container['processing_bank'];
    }

    /**
     * Sets processing_bank
     *
     * @param string|null $processing_bank processing_bank
     *
     * @return self
     */
    public function setProcessingBank($processing_bank)
    {
        $this->container['processing_bank'] = $processing_bank;

        return $this;
    }

    /**
     * Gets external_reference
     *
     * @return string|null
     */
    public function getExternalReference()
    {
        return $this->container['external_reference'];
    }

    /**
     * Sets external_reference
     *
     * @param string|null $external_reference external_reference
     *
     * @return self
     */
    public function setExternalReference($external_reference)
    {
        $this->container['external_reference'] = $external_reference;

        return $this;
    }

    /**
     * Gets reference_amount
     *
     * @return string|null
     */
    public function getReferenceAmount()
    {
        return $this->container['reference_amount'];
    }

    /**
     * Sets reference_amount
     *
     * @param string|null $reference_amount reference_amount
     *
     * @return self
     */
    public function setReferenceAmount($reference_amount)
    {
        $this->container['reference_amount'] = $reference_amount;

        return $this;
    }

    /**
     * Gets internal_state
     *
     * @return string|null
     */
    public function getInternalState()
    {
        return $this->container['internal_state'];
    }

    /**
     * Sets internal_state
     *
     * @param string|null $internal_state internal_state
     *
     * @return self
     */
    public function setInternalState($internal_state)
    {
        $this->container['internal_state'] = $internal_state;

        return $this;
    }

    /**
     * Gets internal_status
     *
     * @return string|null
     */
    public function getInternalStatus()
    {
        return $this->container['internal_status'];
    }

    /**
     * Sets internal_status
     *
     * @param string|null $internal_status internal_status
     *
     * @return self
     */
    public function setInternalStatus($internal_status)
    {
        $this->container['internal_status'] = $internal_status;

        return $this;
    }

    /**
     * Gets account_external
     *
     * @return \OpenAPI\Client\Model\BatchTransactionAccountExternal|null
     */
    public function getAccountExternal()
    {
        return $this->container['account_external'];
    }

    /**
     * Sets account_external
     *
     * @param \OpenAPI\Client\Model\BatchTransactionAccountExternal|null $account_external account_external
     *
     * @return self
     */
    public function setAccountExternal($account_external)
    {
        $this->container['account_external'] = $account_external;

        return $this;
    }

    /**
     * Gets external_account_details
     *
     * @return string|null
     */
    public function getExternalAccountDetails()
    {
        return $this->container['external_account_details'];
    }

    /**
     * Sets external_account_details
     *
     * @param string|null $external_account_details external_account_details
     *
     * @return self
     */
    public function setExternalAccountDetails($external_account_details)
    {
        $this->container['external_account_details'] = $external_account_details;

        return $this;
    }

    /**
     * Gets external_account_details_encrypted
     *
     * @return bool|null
     */
    public function getExternalAccountDetailsEncrypted()
    {
        return $this->container['external_account_details_encrypted'];
    }

    /**
     * Sets external_account_details_encrypted
     *
     * @param bool|null $external_account_details_encrypted external_account_details_encrypted
     *
     * @return self
     */
    public function setExternalAccountDetailsEncrypted($external_account_details_encrypted)
    {
        $this->container['external_account_details_encrypted'] = $external_account_details_encrypted;

        return $this;
    }

    /**
     * Gets marketplace
     *
     * @return \OpenAPI\Client\Model\BatchTransactionMarketplace|null
     */
    public function getMarketplace()
    {
        return $this->container['marketplace'];
    }

    /**
     * Sets marketplace
     *
     * @param \OpenAPI\Client\Model\BatchTransactionMarketplace|null $marketplace marketplace
     *
     * @return self
     */
    public function setMarketplace($marketplace)
    {
        $this->container['marketplace'] = $marketplace;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets user_email
     *
     * @return string|null
     */
    public function getUserEmail()
    {
        return $this->container['user_email'];
    }

    /**
     * Sets user_email
     *
     * @param string|null $user_email user_email
     *
     * @return self
     */
    public function setUserEmail($user_email)
    {
        $this->container['user_email'] = $user_email;

        return $this;
    }

    /**
     * Gets user_external_id
     *
     * @return string|null
     */
    public function getUserExternalId()
    {
        return $this->container['user_external_id'];
    }

    /**
     * Sets user_external_id
     *
     * @param string|null $user_external_id user_external_id
     *
     * @return self
     */
    public function setUserExternalId($user_external_id)
    {
        $this->container['user_external_id'] = $user_external_id;

        return $this;
    }

    /**
     * Gets legal_entity_id
     *
     * @return string|null
     */
    public function getLegalEntityId()
    {
        return $this->container['legal_entity_id'];
    }

    /**
     * Sets legal_entity_id
     *
     * @param string|null $legal_entity_id legal_entity_id
     *
     * @return self
     */
    public function setLegalEntityId($legal_entity_id)
    {
        $this->container['legal_entity_id'] = $legal_entity_id;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets payout_currency
     *
     * @return string|null
     */
    public function getPayoutCurrency()
    {
        return $this->container['payout_currency'];
    }

    /**
     * Sets payout_currency
     *
     * @param string|null $payout_currency payout_currency
     *
     * @return self
     */
    public function setPayoutCurrency($payout_currency)
    {
        $this->container['payout_currency'] = $payout_currency;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets type_method
     *
     * @return string|null
     */
    public function getTypeMethod()
    {
        return $this->container['type_method'];
    }

    /**
     * Sets type_method
     *
     * @param string|null $type_method type_method
     *
     * @return self
     */
    public function setTypeMethod($type_method)
    {
        $this->container['type_method'] = $type_method;

        return $this;
    }

    /**
     * Gets batch_id
     *
     * @return int|null
     */
    public function getBatchId()
    {
        return $this->container['batch_id'];
    }

    /**
     * Sets batch_id
     *
     * @param int|null $batch_id batch_id
     *
     * @return self
     */
    public function setBatchId($batch_id)
    {
        $this->container['batch_id'] = $batch_id;

        return $this;
    }

    /**
     * Gets cuscal_payment_transaction_id
     *
     * @return string|null
     */
    public function getCuscalPaymentTransactionId()
    {
        return $this->container['cuscal_payment_transaction_id'];
    }

    /**
     * Sets cuscal_payment_transaction_id
     *
     * @param string|null $cuscal_payment_transaction_id cuscal_payment_transaction_id
     *
     * @return self
     */
    public function setCuscalPaymentTransactionId($cuscal_payment_transaction_id)
    {
        $this->container['cuscal_payment_transaction_id'] = $cuscal_payment_transaction_id;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type account_type
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets from_user_name
     *
     * @return string|null
     */
    public function getFromUserName()
    {
        return $this->container['from_user_name'];
    }

    /**
     * Sets from_user_name
     *
     * @param string|null $from_user_name from_user_name
     *
     * @return self
     */
    public function setFromUserName($from_user_name)
    {
        $this->container['from_user_name'] = $from_user_name;

        return $this;
    }

    /**
     * Gets from_user_id
     *
     * @return string|null
     */
    public function getFromUserId()
    {
        return $this->container['from_user_id'];
    }

    /**
     * Sets from_user_id
     *
     * @param string|null $from_user_id from_user_id
     *
     * @return self
     */
    public function setFromUserId($from_user_id)
    {
        $this->container['from_user_id'] = $from_user_id;

        return $this;
    }

    /**
     * Gets refund_state
     *
     * @return string|null
     */
    public function getRefundState()
    {
        return $this->container['refund_state'];
    }

    /**
     * Sets refund_state
     *
     * @param string|null $refund_state refund_state
     *
     * @return self
     */
    public function setRefundState($refund_state)
    {
        $this->container['refund_state'] = $refund_state;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string|null $address_line1 address_line1
     *
     * @return self
     */
    public function setAddressLine1($address_line1)
    {
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string|null $address_line2 address_line2
     *
     * @return self
     */
    public function setAddressLine2($address_line2)
    {
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets address_city
     *
     * @return string|null
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     *
     * @param string|null $address_city address_city
     *
     * @return self
     */
    public function setAddressCity($address_city)
    {
        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_state
     *
     * @return string|null
     */
    public function getAddressState()
    {
        return $this->container['address_state'];
    }

    /**
     * Sets address_state
     *
     * @param string|null $address_state address_state
     *
     * @return self
     */
    public function setAddressState($address_state)
    {
        $this->container['address_state'] = $address_state;

        return $this;
    }

    /**
     * Gets address_postcode
     *
     * @return string|null
     */
    public function getAddressPostcode()
    {
        return $this->container['address_postcode'];
    }

    /**
     * Sets address_postcode
     *
     * @param string|null $address_postcode address_postcode
     *
     * @return self
     */
    public function setAddressPostcode($address_postcode)
    {
        $this->container['address_postcode'] = $address_postcode;

        return $this;
    }

    /**
     * Gets address_country
     *
     * @return \OpenAPI\Client\Model\BatchTransactionAddressCountry|null
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     *
     * @param \OpenAPI\Client\Model\BatchTransactionAddressCountry|null $address_country address_country
     *
     * @return self
     */
    public function setAddressCountry($address_country)
    {
        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets debit_credit
     *
     * @return string|null
     */
    public function getDebitCredit()
    {
        return $this->container['debit_credit'];
    }

    /**
     * Sets debit_credit
     *
     * @param string|null $debit_credit debit_credit
     *
     * @return self
     */
    public function setDebitCredit($debit_credit)
    {
        $this->container['debit_credit'] = $debit_credit;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \OpenAPI\Client\Model\BatchTransactionItem|null
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \OpenAPI\Client\Model\BatchTransactionItem|null $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets deposit_reference
     *
     * @return string|null
     */
    public function getDepositReference()
    {
        return $this->container['deposit_reference'];
    }

    /**
     * Sets deposit_reference
     *
     * @param string|null $deposit_reference deposit_reference
     *
     * @return self
     */
    public function setDepositReference($deposit_reference)
    {
        $this->container['deposit_reference'] = $deposit_reference;

        return $this;
    }

    /**
     * Gets related
     *
     * @return \OpenAPI\Client\Model\BatchTransactionRelated|null
     */
    public function getRelated()
    {
        return $this->container['related'];
    }

    /**
     * Sets related
     *
     * @param \OpenAPI\Client\Model\BatchTransactionRelated|null $related related
     *
     * @return self
     */
    public function setRelated($related)
    {
        $this->container['related'] = $related;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \OpenAPI\Client\Model\BatchTransactionLinks|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \OpenAPI\Client\Model\BatchTransactionLinks|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


