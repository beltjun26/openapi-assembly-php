<?php
/**
 * User
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class User implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'user';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'full_name' => 'string',
        'email' => 'string',
        'mobile' => 'string',
        'phone' => 'string',
        'logo_url' => 'string',
        'color_1' => 'string',
        'color_2' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'id' => 'string',
        'custom_descriptor' => 'string',
        'location' => 'string',
        'verification_status' => 'string',
        'held_state' => 'bool',
        'roles' => 'string[]',
        'dob' => 'string',
        'government_number' => 'string',
        'drivers_license' => 'string',
        'flags' => 'object',
        'related' => '\OpenAPI\Client\Model\UserRelated',
        'links' => '\OpenAPI\Client\Model\UserLinks'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'full_name' => null,
        'email' => 'email',
        'mobile' => null,
        'phone' => null,
        'logo_url' => null,
        'color_1' => null,
        'color_2' => null,
        'first_name' => null,
        'last_name' => null,
        'id' => null,
        'custom_descriptor' => null,
        'location' => null,
        'verification_status' => null,
        'held_state' => null,
        'roles' => null,
        'dob' => null,
        'government_number' => null,
        'drivers_license' => null,
        'flags' => null,
        'related' => null,
        'links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'full_name' => 'full_name',
        'email' => 'email',
        'mobile' => 'mobile',
        'phone' => 'phone',
        'logo_url' => 'logo_url',
        'color_1' => 'color_1',
        'color_2' => 'color_2',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'id' => 'id',
        'custom_descriptor' => 'custom_descriptor',
        'location' => 'location',
        'verification_status' => 'verification_status',
        'held_state' => 'held_state',
        'roles' => 'roles',
        'dob' => 'dob',
        'government_number' => 'government_number',
        'drivers_license' => 'drivers_license',
        'flags' => 'flags',
        'related' => 'related',
        'links' => 'links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'full_name' => 'setFullName',
        'email' => 'setEmail',
        'mobile' => 'setMobile',
        'phone' => 'setPhone',
        'logo_url' => 'setLogoUrl',
        'color_1' => 'setColor1',
        'color_2' => 'setColor2',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'id' => 'setId',
        'custom_descriptor' => 'setCustomDescriptor',
        'location' => 'setLocation',
        'verification_status' => 'setVerificationStatus',
        'held_state' => 'setHeldState',
        'roles' => 'setRoles',
        'dob' => 'setDob',
        'government_number' => 'setGovernmentNumber',
        'drivers_license' => 'setDriversLicense',
        'flags' => 'setFlags',
        'related' => 'setRelated',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'full_name' => 'getFullName',
        'email' => 'getEmail',
        'mobile' => 'getMobile',
        'phone' => 'getPhone',
        'logo_url' => 'getLogoUrl',
        'color_1' => 'getColor1',
        'color_2' => 'getColor2',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'id' => 'getId',
        'custom_descriptor' => 'getCustomDescriptor',
        'location' => 'getLocation',
        'verification_status' => 'getVerificationStatus',
        'held_state' => 'getHeldState',
        'roles' => 'getRoles',
        'dob' => 'getDob',
        'government_number' => 'getGovernmentNumber',
        'drivers_license' => 'getDriversLicense',
        'flags' => 'getFlags',
        'related' => 'getRelated',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['full_name'] = $data['full_name'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['mobile'] = $data['mobile'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['logo_url'] = $data['logo_url'] ?? null;
        $this->container['color_1'] = $data['color_1'] ?? null;
        $this->container['color_2'] = $data['color_2'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['custom_descriptor'] = $data['custom_descriptor'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['verification_status'] = $data['verification_status'] ?? null;
        $this->container['held_state'] = $data['held_state'] ?? null;
        $this->container['roles'] = $data['roles'] ?? null;
        $this->container['dob'] = $data['dob'] ?? null;
        $this->container['government_number'] = $data['government_number'] ?? null;
        $this->container['drivers_license'] = $data['drivers_license'] ?? null;
        $this->container['flags'] = $data['flags'] ?? null;
        $this->container['related'] = $data['related'] ?? null;
        $this->container['links'] = $data['links'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name full_name
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string|null
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string|null $mobile mobile
     *
     * @return self
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string|null $logo_url logo_url
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets color_1
     *
     * @return string|null
     */
    public function getColor1()
    {
        return $this->container['color_1'];
    }

    /**
     * Sets color_1
     *
     * @param string|null $color_1 color_1
     *
     * @return self
     */
    public function setColor1($color_1)
    {
        $this->container['color_1'] = $color_1;

        return $this;
    }

    /**
     * Gets color_2
     *
     * @return string|null
     */
    public function getColor2()
    {
        return $this->container['color_2'];
    }

    /**
     * Sets color_2
     *
     * @param string|null $color_2 color_2
     *
     * @return self
     */
    public function setColor2($color_2)
    {
        $this->container['color_2'] = $color_2;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets custom_descriptor
     *
     * @return string|null
     */
    public function getCustomDescriptor()
    {
        return $this->container['custom_descriptor'];
    }

    /**
     * Sets custom_descriptor
     *
     * @param string|null $custom_descriptor custom_descriptor
     *
     * @return self
     */
    public function setCustomDescriptor($custom_descriptor)
    {
        $this->container['custom_descriptor'] = $custom_descriptor;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets verification_status
     *
     * @return string|null
     */
    public function getVerificationStatus()
    {
        return $this->container['verification_status'];
    }

    /**
     * Sets verification_status
     *
     * @param string|null $verification_status verification_status
     *
     * @return self
     */
    public function setVerificationStatus($verification_status)
    {
        $this->container['verification_status'] = $verification_status;

        return $this;
    }

    /**
     * Gets held_state
     *
     * @return bool|null
     */
    public function getHeldState()
    {
        return $this->container['held_state'];
    }

    /**
     * Sets held_state
     *
     * @param bool|null $held_state held_state
     *
     * @return self
     */
    public function setHeldState($held_state)
    {
        $this->container['held_state'] = $held_state;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[]|null $roles roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets dob
     *
     * @return string|null
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     *
     * @param string|null $dob dob
     *
     * @return self
     */
    public function setDob($dob)
    {
        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets government_number
     *
     * @return string|null
     */
    public function getGovernmentNumber()
    {
        return $this->container['government_number'];
    }

    /**
     * Sets government_number
     *
     * @param string|null $government_number government_number
     *
     * @return self
     */
    public function setGovernmentNumber($government_number)
    {
        $this->container['government_number'] = $government_number;

        return $this;
    }

    /**
     * Gets drivers_license
     *
     * @return string|null
     */
    public function getDriversLicense()
    {
        return $this->container['drivers_license'];
    }

    /**
     * Sets drivers_license
     *
     * @param string|null $drivers_license drivers_license
     *
     * @return self
     */
    public function setDriversLicense($drivers_license)
    {
        $this->container['drivers_license'] = $drivers_license;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return object|null
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param object|null $flags flags
     *
     * @return self
     */
    public function setFlags($flags)
    {
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets related
     *
     * @return \OpenAPI\Client\Model\UserRelated|null
     */
    public function getRelated()
    {
        return $this->container['related'];
    }

    /**
     * Sets related
     *
     * @param \OpenAPI\Client\Model\UserRelated|null $related related
     *
     * @return self
     */
    public function setRelated($related)
    {
        $this->container['related'] = $related;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \OpenAPI\Client\Model\UserLinks|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \OpenAPI\Client\Model\UserLinks|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


