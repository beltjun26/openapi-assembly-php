<?php
/**
 * Item
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Item implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'state' => 'string',
        'status' => 'int',
        'amount' => 'int',
        'payment_type_id' => 'int',
        'currency' => 'string',
        'buyer_name' => 'string',
        'buyer_email' => 'string',
        'buyer_country' => 'string',
        'seller_name' => 'string',
        'seller_email' => 'string',
        'seller_country' => 'string',
        'tds_check_state' => 'string',
        'batch_state' => 'string',
        'invoice_url' => 'string',
        'payout_descriptor' => 'string',
        'remaining_amount' => 'int',
        'requested_release_amount' => 'int',
        'custom_descriptor' => 'string',
        'net_amount' => 'int',
        'chargedback_amount' => 'int',
        'refunded_amount' => 'int',
        'released_amount' => 'int',
        'buyer_fees' => 'int',
        'seller_fees' => 'int',
        'credit_card_fee' => 'int',
        'paypal_fee' => 'int',
        'seller_url' => 'string',
        'buyer_url' => 'string',
        'direct_debit_fee' => 'int',
        'due_date' => '\DateTime',
        'pending_release_amount' => 'int',
        'dynamic_descriptor' => 'string',
        'deposit_reference' => 'string',
        'promisepay_fee' => 'int',
        'total_outstanding' => 'int',
        'total_amount' => 'int',
        'payment_method' => 'string',
        'payment_credit_card_enabled' => 'bool',
        'payment_direct_debit_enabled' => 'bool',
        'related' => '\OpenAPI\Client\Model\ItemRelated',
        'links' => '\OpenAPI\Client\Model\ItemLinks'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'description' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'state' => null,
        'status' => null,
        'amount' => null,
        'payment_type_id' => null,
        'currency' => null,
        'buyer_name' => null,
        'buyer_email' => 'email',
        'buyer_country' => null,
        'seller_name' => null,
        'seller_email' => 'email',
        'seller_country' => 'email',
        'tds_check_state' => 'email',
        'batch_state' => null,
        'invoice_url' => null,
        'payout_descriptor' => null,
        'remaining_amount' => null,
        'requested_release_amount' => null,
        'custom_descriptor' => null,
        'net_amount' => null,
        'chargedback_amount' => null,
        'refunded_amount' => null,
        'released_amount' => null,
        'buyer_fees' => null,
        'seller_fees' => null,
        'credit_card_fee' => null,
        'paypal_fee' => null,
        'seller_url' => null,
        'buyer_url' => null,
        'direct_debit_fee' => null,
        'due_date' => 'date',
        'pending_release_amount' => null,
        'dynamic_descriptor' => null,
        'deposit_reference' => null,
        'promisepay_fee' => null,
        'total_outstanding' => null,
        'total_amount' => null,
        'payment_method' => null,
        'payment_credit_card_enabled' => null,
        'payment_direct_debit_enabled' => null,
        'related' => null,
        'links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'state' => 'state',
        'status' => 'status',
        'amount' => 'amount',
        'payment_type_id' => 'payment_type_id',
        'currency' => 'currency',
        'buyer_name' => 'buyer_name',
        'buyer_email' => 'buyer_email',
        'buyer_country' => 'buyer_country',
        'seller_name' => 'seller_name',
        'seller_email' => 'seller_email',
        'seller_country' => 'seller_country',
        'tds_check_state' => 'tds_check_state',
        'batch_state' => 'batch_state',
        'invoice_url' => 'invoice_url',
        'payout_descriptor' => 'payout_descriptor',
        'remaining_amount' => 'remaining_amount',
        'requested_release_amount' => 'requested_release_amount',
        'custom_descriptor' => 'custom_descriptor',
        'net_amount' => 'net_amount',
        'chargedback_amount' => 'chargedback_amount',
        'refunded_amount' => 'refunded_amount',
        'released_amount' => 'released_amount',
        'buyer_fees' => 'buyer_fees',
        'seller_fees' => 'seller_fees',
        'credit_card_fee' => 'credit_card_fee',
        'paypal_fee' => 'paypal_fee',
        'seller_url' => 'seller_url',
        'buyer_url' => 'buyer_url',
        'direct_debit_fee' => 'direct_debit_fee',
        'due_date' => 'due_date',
        'pending_release_amount' => 'pending_release_amount',
        'dynamic_descriptor' => 'dynamic_descriptor',
        'deposit_reference' => 'deposit_reference',
        'promisepay_fee' => 'promisepay_fee',
        'total_outstanding' => 'total_outstanding',
        'total_amount' => 'total_amount',
        'payment_method' => 'payment_method',
        'payment_credit_card_enabled' => 'payment_credit_card_enabled',
        'payment_direct_debit_enabled' => 'payment_direct_debit_enabled',
        'related' => 'related',
        'links' => 'links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'state' => 'setState',
        'status' => 'setStatus',
        'amount' => 'setAmount',
        'payment_type_id' => 'setPaymentTypeId',
        'currency' => 'setCurrency',
        'buyer_name' => 'setBuyerName',
        'buyer_email' => 'setBuyerEmail',
        'buyer_country' => 'setBuyerCountry',
        'seller_name' => 'setSellerName',
        'seller_email' => 'setSellerEmail',
        'seller_country' => 'setSellerCountry',
        'tds_check_state' => 'setTdsCheckState',
        'batch_state' => 'setBatchState',
        'invoice_url' => 'setInvoiceUrl',
        'payout_descriptor' => 'setPayoutDescriptor',
        'remaining_amount' => 'setRemainingAmount',
        'requested_release_amount' => 'setRequestedReleaseAmount',
        'custom_descriptor' => 'setCustomDescriptor',
        'net_amount' => 'setNetAmount',
        'chargedback_amount' => 'setChargedbackAmount',
        'refunded_amount' => 'setRefundedAmount',
        'released_amount' => 'setReleasedAmount',
        'buyer_fees' => 'setBuyerFees',
        'seller_fees' => 'setSellerFees',
        'credit_card_fee' => 'setCreditCardFee',
        'paypal_fee' => 'setPaypalFee',
        'seller_url' => 'setSellerUrl',
        'buyer_url' => 'setBuyerUrl',
        'direct_debit_fee' => 'setDirectDebitFee',
        'due_date' => 'setDueDate',
        'pending_release_amount' => 'setPendingReleaseAmount',
        'dynamic_descriptor' => 'setDynamicDescriptor',
        'deposit_reference' => 'setDepositReference',
        'promisepay_fee' => 'setPromisepayFee',
        'total_outstanding' => 'setTotalOutstanding',
        'total_amount' => 'setTotalAmount',
        'payment_method' => 'setPaymentMethod',
        'payment_credit_card_enabled' => 'setPaymentCreditCardEnabled',
        'payment_direct_debit_enabled' => 'setPaymentDirectDebitEnabled',
        'related' => 'setRelated',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'state' => 'getState',
        'status' => 'getStatus',
        'amount' => 'getAmount',
        'payment_type_id' => 'getPaymentTypeId',
        'currency' => 'getCurrency',
        'buyer_name' => 'getBuyerName',
        'buyer_email' => 'getBuyerEmail',
        'buyer_country' => 'getBuyerCountry',
        'seller_name' => 'getSellerName',
        'seller_email' => 'getSellerEmail',
        'seller_country' => 'getSellerCountry',
        'tds_check_state' => 'getTdsCheckState',
        'batch_state' => 'getBatchState',
        'invoice_url' => 'getInvoiceUrl',
        'payout_descriptor' => 'getPayoutDescriptor',
        'remaining_amount' => 'getRemainingAmount',
        'requested_release_amount' => 'getRequestedReleaseAmount',
        'custom_descriptor' => 'getCustomDescriptor',
        'net_amount' => 'getNetAmount',
        'chargedback_amount' => 'getChargedbackAmount',
        'refunded_amount' => 'getRefundedAmount',
        'released_amount' => 'getReleasedAmount',
        'buyer_fees' => 'getBuyerFees',
        'seller_fees' => 'getSellerFees',
        'credit_card_fee' => 'getCreditCardFee',
        'paypal_fee' => 'getPaypalFee',
        'seller_url' => 'getSellerUrl',
        'buyer_url' => 'getBuyerUrl',
        'direct_debit_fee' => 'getDirectDebitFee',
        'due_date' => 'getDueDate',
        'pending_release_amount' => 'getPendingReleaseAmount',
        'dynamic_descriptor' => 'getDynamicDescriptor',
        'deposit_reference' => 'getDepositReference',
        'promisepay_fee' => 'getPromisepayFee',
        'total_outstanding' => 'getTotalOutstanding',
        'total_amount' => 'getTotalAmount',
        'payment_method' => 'getPaymentMethod',
        'payment_credit_card_enabled' => 'getPaymentCreditCardEnabled',
        'payment_direct_debit_enabled' => 'getPaymentDirectDebitEnabled',
        'related' => 'getRelated',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATE_PENDING = 'pending';
    const STATE_PAYMENT_REQUIRED = 'payment_required';
    const STATE_WIRE_PENDING = 'wire_pending';
    const STATE_PAYMENT_PENDING = 'payment_pending';
    const STATE_PAYMENT_HELD = 'payment_held';
    const STATE_PAYMENT_AUTHORIZED = 'payment_authorized';
    const STATE_VOIDED = 'voided';
    const STATE_FRAUD_HOLD = 'fraud_hold';
    const STATE_PAYMENT_DEPOSITED = 'payment_deposited';
    const STATE_WORK_COMPLETED = 'work_completed';
    const STATE_PROBLEM_FLAGGED = 'problem_flagged';
    const STATE_PROBLEM_RESOLVE_REQUESTED = 'problem_resolve_requested';
    const STATE_PROBLEM_ESCALATED = 'problem_escalated';
    const STATE_COMPLETED = 'completed';
    const STATE_CANCELLED = 'cancelled';
    const STATE_REFUNDED = 'refunded';
    const STATE_REFUND_PENDING = 'refund_pending';
    const STATE_REFUND_FLAGGED = 'refund_flagged';
    const STATE_OFF_PLATFORM_REFUNDED = 'off_platform_refunded';
    const STATE_PARTIAL_COMPLETED = 'partial_completed';
    const STATE_PARTIAL_PAID = 'partial_paid';
    const STATE_OFF_PLATFORM_CHARGEDBACK = 'off_platform_chargedback';
    const STATUS_22000 = 22000;
    const STATUS_22100 = 22100;
    const STATUS_22110 = 22110;
    const STATUS_22150 = 22150;
    const STATUS_22175 = 22175;
    const STATUS_22180 = 22180;
    const STATUS_22195 = 22195;
    const STATUS_22190 = 22190;
    const STATUS_22200 = 22200;
    const STATUS_22300 = 22300;
    const STATUS_22400 = 22400;
    const STATUS_22410 = 22410;
    const STATUS_22420 = 22420;
    const STATUS_22500 = 22500;
    const STATUS_22575 = 22575;
    const STATUS_22600 = 22600;
    const STATUS_22610 = 22610;
    const STATUS_22650 = 22650;
    const STATUS_22670 = 22670;
    const STATUS_22700 = 22700;
    const STATUS_22800 = 22800;
    const STATUS_22680 = 22680;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_PENDING,
            self::STATE_PAYMENT_REQUIRED,
            self::STATE_WIRE_PENDING,
            self::STATE_PAYMENT_PENDING,
            self::STATE_PAYMENT_HELD,
            self::STATE_PAYMENT_AUTHORIZED,
            self::STATE_VOIDED,
            self::STATE_FRAUD_HOLD,
            self::STATE_PAYMENT_DEPOSITED,
            self::STATE_WORK_COMPLETED,
            self::STATE_PROBLEM_FLAGGED,
            self::STATE_PROBLEM_RESOLVE_REQUESTED,
            self::STATE_PROBLEM_ESCALATED,
            self::STATE_COMPLETED,
            self::STATE_CANCELLED,
            self::STATE_REFUNDED,
            self::STATE_REFUND_PENDING,
            self::STATE_REFUND_FLAGGED,
            self::STATE_OFF_PLATFORM_REFUNDED,
            self::STATE_PARTIAL_COMPLETED,
            self::STATE_PARTIAL_PAID,
            self::STATE_OFF_PLATFORM_CHARGEDBACK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_22000,
            self::STATUS_22100,
            self::STATUS_22110,
            self::STATUS_22150,
            self::STATUS_22175,
            self::STATUS_22180,
            self::STATUS_22195,
            self::STATUS_22190,
            self::STATUS_22200,
            self::STATUS_22300,
            self::STATUS_22400,
            self::STATUS_22410,
            self::STATUS_22420,
            self::STATUS_22500,
            self::STATUS_22575,
            self::STATUS_22600,
            self::STATUS_22610,
            self::STATUS_22650,
            self::STATUS_22670,
            self::STATUS_22700,
            self::STATUS_22800,
            self::STATUS_22680,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['payment_type_id'] = $data['payment_type_id'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['buyer_name'] = $data['buyer_name'] ?? null;
        $this->container['buyer_email'] = $data['buyer_email'] ?? null;
        $this->container['buyer_country'] = $data['buyer_country'] ?? null;
        $this->container['seller_name'] = $data['seller_name'] ?? null;
        $this->container['seller_email'] = $data['seller_email'] ?? null;
        $this->container['seller_country'] = $data['seller_country'] ?? null;
        $this->container['tds_check_state'] = $data['tds_check_state'] ?? null;
        $this->container['batch_state'] = $data['batch_state'] ?? null;
        $this->container['invoice_url'] = $data['invoice_url'] ?? null;
        $this->container['payout_descriptor'] = $data['payout_descriptor'] ?? null;
        $this->container['remaining_amount'] = $data['remaining_amount'] ?? null;
        $this->container['requested_release_amount'] = $data['requested_release_amount'] ?? null;
        $this->container['custom_descriptor'] = $data['custom_descriptor'] ?? null;
        $this->container['net_amount'] = $data['net_amount'] ?? null;
        $this->container['chargedback_amount'] = $data['chargedback_amount'] ?? null;
        $this->container['refunded_amount'] = $data['refunded_amount'] ?? null;
        $this->container['released_amount'] = $data['released_amount'] ?? null;
        $this->container['buyer_fees'] = $data['buyer_fees'] ?? null;
        $this->container['seller_fees'] = $data['seller_fees'] ?? null;
        $this->container['credit_card_fee'] = $data['credit_card_fee'] ?? null;
        $this->container['paypal_fee'] = $data['paypal_fee'] ?? null;
        $this->container['seller_url'] = $data['seller_url'] ?? null;
        $this->container['buyer_url'] = $data['buyer_url'] ?? null;
        $this->container['direct_debit_fee'] = $data['direct_debit_fee'] ?? null;
        $this->container['due_date'] = $data['due_date'] ?? null;
        $this->container['pending_release_amount'] = $data['pending_release_amount'] ?? null;
        $this->container['dynamic_descriptor'] = $data['dynamic_descriptor'] ?? null;
        $this->container['deposit_reference'] = $data['deposit_reference'] ?? null;
        $this->container['promisepay_fee'] = $data['promisepay_fee'] ?? null;
        $this->container['total_outstanding'] = $data['total_outstanding'] ?? null;
        $this->container['total_amount'] = $data['total_amount'] ?? null;
        $this->container['payment_method'] = $data['payment_method'] ?? null;
        $this->container['payment_credit_card_enabled'] = $data['payment_credit_card_enabled'] ?? null;
        $this->container['payment_direct_debit_enabled'] = $data['payment_direct_debit_enabled'] ?? null;
        $this->container['related'] = $data['related'] ?? null;
        $this->container['links'] = $data['links'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets payment_type_id
     *
     * @return int|null
     */
    public function getPaymentTypeId()
    {
        return $this->container['payment_type_id'];
    }

    /**
     * Sets payment_type_id
     *
     * @param int|null $payment_type_id payment_type_id
     *
     * @return self
     */
    public function setPaymentTypeId($payment_type_id)
    {
        $this->container['payment_type_id'] = $payment_type_id;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets buyer_name
     *
     * @return string|null
     */
    public function getBuyerName()
    {
        return $this->container['buyer_name'];
    }

    /**
     * Sets buyer_name
     *
     * @param string|null $buyer_name buyer_name
     *
     * @return self
     */
    public function setBuyerName($buyer_name)
    {
        $this->container['buyer_name'] = $buyer_name;

        return $this;
    }

    /**
     * Gets buyer_email
     *
     * @return string|null
     */
    public function getBuyerEmail()
    {
        return $this->container['buyer_email'];
    }

    /**
     * Sets buyer_email
     *
     * @param string|null $buyer_email buyer_email
     *
     * @return self
     */
    public function setBuyerEmail($buyer_email)
    {
        $this->container['buyer_email'] = $buyer_email;

        return $this;
    }

    /**
     * Gets buyer_country
     *
     * @return string|null
     */
    public function getBuyerCountry()
    {
        return $this->container['buyer_country'];
    }

    /**
     * Sets buyer_country
     *
     * @param string|null $buyer_country buyer_country
     *
     * @return self
     */
    public function setBuyerCountry($buyer_country)
    {
        $this->container['buyer_country'] = $buyer_country;

        return $this;
    }

    /**
     * Gets seller_name
     *
     * @return string|null
     */
    public function getSellerName()
    {
        return $this->container['seller_name'];
    }

    /**
     * Sets seller_name
     *
     * @param string|null $seller_name seller_name
     *
     * @return self
     */
    public function setSellerName($seller_name)
    {
        $this->container['seller_name'] = $seller_name;

        return $this;
    }

    /**
     * Gets seller_email
     *
     * @return string|null
     */
    public function getSellerEmail()
    {
        return $this->container['seller_email'];
    }

    /**
     * Sets seller_email
     *
     * @param string|null $seller_email seller_email
     *
     * @return self
     */
    public function setSellerEmail($seller_email)
    {
        $this->container['seller_email'] = $seller_email;

        return $this;
    }

    /**
     * Gets seller_country
     *
     * @return string|null
     */
    public function getSellerCountry()
    {
        return $this->container['seller_country'];
    }

    /**
     * Sets seller_country
     *
     * @param string|null $seller_country seller_country
     *
     * @return self
     */
    public function setSellerCountry($seller_country)
    {
        $this->container['seller_country'] = $seller_country;

        return $this;
    }

    /**
     * Gets tds_check_state
     *
     * @return string|null
     */
    public function getTdsCheckState()
    {
        return $this->container['tds_check_state'];
    }

    /**
     * Sets tds_check_state
     *
     * @param string|null $tds_check_state tds_check_state
     *
     * @return self
     */
    public function setTdsCheckState($tds_check_state)
    {
        $this->container['tds_check_state'] = $tds_check_state;

        return $this;
    }

    /**
     * Gets batch_state
     *
     * @return string|null
     */
    public function getBatchState()
    {
        return $this->container['batch_state'];
    }

    /**
     * Sets batch_state
     *
     * @param string|null $batch_state batch_state
     *
     * @return self
     */
    public function setBatchState($batch_state)
    {
        $this->container['batch_state'] = $batch_state;

        return $this;
    }

    /**
     * Gets invoice_url
     *
     * @return string|null
     */
    public function getInvoiceUrl()
    {
        return $this->container['invoice_url'];
    }

    /**
     * Sets invoice_url
     *
     * @param string|null $invoice_url invoice_url
     *
     * @return self
     */
    public function setInvoiceUrl($invoice_url)
    {
        $this->container['invoice_url'] = $invoice_url;

        return $this;
    }

    /**
     * Gets payout_descriptor
     *
     * @return string|null
     */
    public function getPayoutDescriptor()
    {
        return $this->container['payout_descriptor'];
    }

    /**
     * Sets payout_descriptor
     *
     * @param string|null $payout_descriptor payout_descriptor
     *
     * @return self
     */
    public function setPayoutDescriptor($payout_descriptor)
    {
        $this->container['payout_descriptor'] = $payout_descriptor;

        return $this;
    }

    /**
     * Gets remaining_amount
     *
     * @return int|null
     */
    public function getRemainingAmount()
    {
        return $this->container['remaining_amount'];
    }

    /**
     * Sets remaining_amount
     *
     * @param int|null $remaining_amount remaining_amount
     *
     * @return self
     */
    public function setRemainingAmount($remaining_amount)
    {
        $this->container['remaining_amount'] = $remaining_amount;

        return $this;
    }

    /**
     * Gets requested_release_amount
     *
     * @return int|null
     */
    public function getRequestedReleaseAmount()
    {
        return $this->container['requested_release_amount'];
    }

    /**
     * Sets requested_release_amount
     *
     * @param int|null $requested_release_amount requested_release_amount
     *
     * @return self
     */
    public function setRequestedReleaseAmount($requested_release_amount)
    {
        $this->container['requested_release_amount'] = $requested_release_amount;

        return $this;
    }

    /**
     * Gets custom_descriptor
     *
     * @return string|null
     */
    public function getCustomDescriptor()
    {
        return $this->container['custom_descriptor'];
    }

    /**
     * Sets custom_descriptor
     *
     * @param string|null $custom_descriptor custom_descriptor
     *
     * @return self
     */
    public function setCustomDescriptor($custom_descriptor)
    {
        $this->container['custom_descriptor'] = $custom_descriptor;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return int|null
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param int|null $net_amount net_amount
     *
     * @return self
     */
    public function setNetAmount($net_amount)
    {
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets chargedback_amount
     *
     * @return int|null
     */
    public function getChargedbackAmount()
    {
        return $this->container['chargedback_amount'];
    }

    /**
     * Sets chargedback_amount
     *
     * @param int|null $chargedback_amount chargedback_amount
     *
     * @return self
     */
    public function setChargedbackAmount($chargedback_amount)
    {
        $this->container['chargedback_amount'] = $chargedback_amount;

        return $this;
    }

    /**
     * Gets refunded_amount
     *
     * @return int|null
     */
    public function getRefundedAmount()
    {
        return $this->container['refunded_amount'];
    }

    /**
     * Sets refunded_amount
     *
     * @param int|null $refunded_amount refunded_amount
     *
     * @return self
     */
    public function setRefundedAmount($refunded_amount)
    {
        $this->container['refunded_amount'] = $refunded_amount;

        return $this;
    }

    /**
     * Gets released_amount
     *
     * @return int|null
     */
    public function getReleasedAmount()
    {
        return $this->container['released_amount'];
    }

    /**
     * Sets released_amount
     *
     * @param int|null $released_amount released_amount
     *
     * @return self
     */
    public function setReleasedAmount($released_amount)
    {
        $this->container['released_amount'] = $released_amount;

        return $this;
    }

    /**
     * Gets buyer_fees
     *
     * @return int|null
     */
    public function getBuyerFees()
    {
        return $this->container['buyer_fees'];
    }

    /**
     * Sets buyer_fees
     *
     * @param int|null $buyer_fees buyer_fees
     *
     * @return self
     */
    public function setBuyerFees($buyer_fees)
    {
        $this->container['buyer_fees'] = $buyer_fees;

        return $this;
    }

    /**
     * Gets seller_fees
     *
     * @return int|null
     */
    public function getSellerFees()
    {
        return $this->container['seller_fees'];
    }

    /**
     * Sets seller_fees
     *
     * @param int|null $seller_fees seller_fees
     *
     * @return self
     */
    public function setSellerFees($seller_fees)
    {
        $this->container['seller_fees'] = $seller_fees;

        return $this;
    }

    /**
     * Gets credit_card_fee
     *
     * @return int|null
     */
    public function getCreditCardFee()
    {
        return $this->container['credit_card_fee'];
    }

    /**
     * Sets credit_card_fee
     *
     * @param int|null $credit_card_fee credit_card_fee
     *
     * @return self
     */
    public function setCreditCardFee($credit_card_fee)
    {
        $this->container['credit_card_fee'] = $credit_card_fee;

        return $this;
    }

    /**
     * Gets paypal_fee
     *
     * @return int|null
     */
    public function getPaypalFee()
    {
        return $this->container['paypal_fee'];
    }

    /**
     * Sets paypal_fee
     *
     * @param int|null $paypal_fee paypal_fee
     *
     * @return self
     */
    public function setPaypalFee($paypal_fee)
    {
        $this->container['paypal_fee'] = $paypal_fee;

        return $this;
    }

    /**
     * Gets seller_url
     *
     * @return string|null
     */
    public function getSellerUrl()
    {
        return $this->container['seller_url'];
    }

    /**
     * Sets seller_url
     *
     * @param string|null $seller_url seller_url
     *
     * @return self
     */
    public function setSellerUrl($seller_url)
    {
        $this->container['seller_url'] = $seller_url;

        return $this;
    }

    /**
     * Gets buyer_url
     *
     * @return string|null
     */
    public function getBuyerUrl()
    {
        return $this->container['buyer_url'];
    }

    /**
     * Sets buyer_url
     *
     * @param string|null $buyer_url buyer_url
     *
     * @return self
     */
    public function setBuyerUrl($buyer_url)
    {
        $this->container['buyer_url'] = $buyer_url;

        return $this;
    }

    /**
     * Gets direct_debit_fee
     *
     * @return int|null
     */
    public function getDirectDebitFee()
    {
        return $this->container['direct_debit_fee'];
    }

    /**
     * Sets direct_debit_fee
     *
     * @param int|null $direct_debit_fee direct_debit_fee
     *
     * @return self
     */
    public function setDirectDebitFee($direct_debit_fee)
    {
        $this->container['direct_debit_fee'] = $direct_debit_fee;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date due_date
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets pending_release_amount
     *
     * @return int|null
     */
    public function getPendingReleaseAmount()
    {
        return $this->container['pending_release_amount'];
    }

    /**
     * Sets pending_release_amount
     *
     * @param int|null $pending_release_amount pending_release_amount
     *
     * @return self
     */
    public function setPendingReleaseAmount($pending_release_amount)
    {
        $this->container['pending_release_amount'] = $pending_release_amount;

        return $this;
    }

    /**
     * Gets dynamic_descriptor
     *
     * @return string|null
     */
    public function getDynamicDescriptor()
    {
        return $this->container['dynamic_descriptor'];
    }

    /**
     * Sets dynamic_descriptor
     *
     * @param string|null $dynamic_descriptor dynamic_descriptor
     *
     * @return self
     */
    public function setDynamicDescriptor($dynamic_descriptor)
    {
        $this->container['dynamic_descriptor'] = $dynamic_descriptor;

        return $this;
    }

    /**
     * Gets deposit_reference
     *
     * @return string|null
     */
    public function getDepositReference()
    {
        return $this->container['deposit_reference'];
    }

    /**
     * Sets deposit_reference
     *
     * @param string|null $deposit_reference deposit_reference
     *
     * @return self
     */
    public function setDepositReference($deposit_reference)
    {
        $this->container['deposit_reference'] = $deposit_reference;

        return $this;
    }

    /**
     * Gets promisepay_fee
     *
     * @return int|null
     */
    public function getPromisepayFee()
    {
        return $this->container['promisepay_fee'];
    }

    /**
     * Sets promisepay_fee
     *
     * @param int|null $promisepay_fee promisepay_fee
     *
     * @return self
     */
    public function setPromisepayFee($promisepay_fee)
    {
        $this->container['promisepay_fee'] = $promisepay_fee;

        return $this;
    }

    /**
     * Gets total_outstanding
     *
     * @return int|null
     */
    public function getTotalOutstanding()
    {
        return $this->container['total_outstanding'];
    }

    /**
     * Sets total_outstanding
     *
     * @param int|null $total_outstanding total_outstanding
     *
     * @return self
     */
    public function setTotalOutstanding($total_outstanding)
    {
        $this->container['total_outstanding'] = $total_outstanding;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return int|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param int|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string|null $payment_method payment_method
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets payment_credit_card_enabled
     *
     * @return bool|null
     */
    public function getPaymentCreditCardEnabled()
    {
        return $this->container['payment_credit_card_enabled'];
    }

    /**
     * Sets payment_credit_card_enabled
     *
     * @param bool|null $payment_credit_card_enabled payment_credit_card_enabled
     *
     * @return self
     */
    public function setPaymentCreditCardEnabled($payment_credit_card_enabled)
    {
        $this->container['payment_credit_card_enabled'] = $payment_credit_card_enabled;

        return $this;
    }

    /**
     * Gets payment_direct_debit_enabled
     *
     * @return bool|null
     */
    public function getPaymentDirectDebitEnabled()
    {
        return $this->container['payment_direct_debit_enabled'];
    }

    /**
     * Sets payment_direct_debit_enabled
     *
     * @param bool|null $payment_direct_debit_enabled payment_direct_debit_enabled
     *
     * @return self
     */
    public function setPaymentDirectDebitEnabled($payment_direct_debit_enabled)
    {
        $this->container['payment_direct_debit_enabled'] = $payment_direct_debit_enabled;

        return $this;
    }

    /**
     * Gets related
     *
     * @return \OpenAPI\Client\Model\ItemRelated|null
     */
    public function getRelated()
    {
        return $this->container['related'];
    }

    /**
     * Sets related
     *
     * @param \OpenAPI\Client\Model\ItemRelated|null $related related
     *
     * @return self
     */
    public function setRelated($related)
    {
        $this->container['related'] = $related;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \OpenAPI\Client\Model\ItemLinks|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \OpenAPI\Client\Model\ItemLinks|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


