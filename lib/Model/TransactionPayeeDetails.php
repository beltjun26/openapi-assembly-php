<?php
/**
 * TransactionPayeeDetails
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionPayeeDetails Class Doc Comment
 *
 * @category Class
 * @description payee details. only filled for specific payment types (fast payments - npp)
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class TransactionPayeeDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'transaction_payee_details';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'debtor_name' => 'string',
        'debtor_legal_name' => 'string',
        'debtor_bsb' => 'string',
        'debtor_account' => 'string',
        'clearing_system_transaction_id' => 'string',
        'remittance_information' => 'string',
        'pay_id' => 'string',
        'pay_id_type' => 'string',
        'end_to_end_id' => 'string',
        'npp_payin_internal_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'debtor_name' => null,
        'debtor_legal_name' => null,
        'debtor_bsb' => null,
        'debtor_account' => null,
        'clearing_system_transaction_id' => null,
        'remittance_information' => null,
        'pay_id' => null,
        'pay_id_type' => null,
        'end_to_end_id' => null,
        'npp_payin_internal_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'debtor_name' => 'debtor_name',
        'debtor_legal_name' => 'debtor_legal_name',
        'debtor_bsb' => 'debtor_bsb',
        'debtor_account' => 'debtor_account',
        'clearing_system_transaction_id' => 'clearing_system_transaction_id',
        'remittance_information' => 'remittance_information',
        'pay_id' => 'pay_id',
        'pay_id_type' => 'pay_id_type',
        'end_to_end_id' => 'end_to_end_id',
        'npp_payin_internal_id' => 'npp_payin_internal_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'debtor_name' => 'setDebtorName',
        'debtor_legal_name' => 'setDebtorLegalName',
        'debtor_bsb' => 'setDebtorBsb',
        'debtor_account' => 'setDebtorAccount',
        'clearing_system_transaction_id' => 'setClearingSystemTransactionId',
        'remittance_information' => 'setRemittanceInformation',
        'pay_id' => 'setPayId',
        'pay_id_type' => 'setPayIdType',
        'end_to_end_id' => 'setEndToEndId',
        'npp_payin_internal_id' => 'setNppPayinInternalId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'debtor_name' => 'getDebtorName',
        'debtor_legal_name' => 'getDebtorLegalName',
        'debtor_bsb' => 'getDebtorBsb',
        'debtor_account' => 'getDebtorAccount',
        'clearing_system_transaction_id' => 'getClearingSystemTransactionId',
        'remittance_information' => 'getRemittanceInformation',
        'pay_id' => 'getPayId',
        'pay_id_type' => 'getPayIdType',
        'end_to_end_id' => 'getEndToEndId',
        'npp_payin_internal_id' => 'getNppPayinInternalId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['debtor_name'] = $data['debtor_name'] ?? null;
        $this->container['debtor_legal_name'] = $data['debtor_legal_name'] ?? null;
        $this->container['debtor_bsb'] = $data['debtor_bsb'] ?? null;
        $this->container['debtor_account'] = $data['debtor_account'] ?? null;
        $this->container['clearing_system_transaction_id'] = $data['clearing_system_transaction_id'] ?? null;
        $this->container['remittance_information'] = $data['remittance_information'] ?? null;
        $this->container['pay_id'] = $data['pay_id'] ?? null;
        $this->container['pay_id_type'] = $data['pay_id_type'] ?? null;
        $this->container['end_to_end_id'] = $data['end_to_end_id'] ?? null;
        $this->container['npp_payin_internal_id'] = $data['npp_payin_internal_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets debtor_name
     *
     * @return string|null
     */
    public function getDebtorName()
    {
        return $this->container['debtor_name'];
    }

    /**
     * Sets debtor_name
     *
     * @param string|null $debtor_name debtor_name
     *
     * @return self
     */
    public function setDebtorName($debtor_name)
    {
        $this->container['debtor_name'] = $debtor_name;

        return $this;
    }

    /**
     * Gets debtor_legal_name
     *
     * @return string|null
     */
    public function getDebtorLegalName()
    {
        return $this->container['debtor_legal_name'];
    }

    /**
     * Sets debtor_legal_name
     *
     * @param string|null $debtor_legal_name debtor_legal_name
     *
     * @return self
     */
    public function setDebtorLegalName($debtor_legal_name)
    {
        $this->container['debtor_legal_name'] = $debtor_legal_name;

        return $this;
    }

    /**
     * Gets debtor_bsb
     *
     * @return string|null
     */
    public function getDebtorBsb()
    {
        return $this->container['debtor_bsb'];
    }

    /**
     * Sets debtor_bsb
     *
     * @param string|null $debtor_bsb debtor_bsb
     *
     * @return self
     */
    public function setDebtorBsb($debtor_bsb)
    {
        $this->container['debtor_bsb'] = $debtor_bsb;

        return $this;
    }

    /**
     * Gets debtor_account
     *
     * @return string|null
     */
    public function getDebtorAccount()
    {
        return $this->container['debtor_account'];
    }

    /**
     * Sets debtor_account
     *
     * @param string|null $debtor_account debtor_account
     *
     * @return self
     */
    public function setDebtorAccount($debtor_account)
    {
        $this->container['debtor_account'] = $debtor_account;

        return $this;
    }

    /**
     * Gets clearing_system_transaction_id
     *
     * @return string|null
     */
    public function getClearingSystemTransactionId()
    {
        return $this->container['clearing_system_transaction_id'];
    }

    /**
     * Sets clearing_system_transaction_id
     *
     * @param string|null $clearing_system_transaction_id clearing_system_transaction_id
     *
     * @return self
     */
    public function setClearingSystemTransactionId($clearing_system_transaction_id)
    {
        $this->container['clearing_system_transaction_id'] = $clearing_system_transaction_id;

        return $this;
    }

    /**
     * Gets remittance_information
     *
     * @return string|null
     */
    public function getRemittanceInformation()
    {
        return $this->container['remittance_information'];
    }

    /**
     * Sets remittance_information
     *
     * @param string|null $remittance_information remittance_information
     *
     * @return self
     */
    public function setRemittanceInformation($remittance_information)
    {
        $this->container['remittance_information'] = $remittance_information;

        return $this;
    }

    /**
     * Gets pay_id
     *
     * @return string|null
     */
    public function getPayId()
    {
        return $this->container['pay_id'];
    }

    /**
     * Sets pay_id
     *
     * @param string|null $pay_id pay_id
     *
     * @return self
     */
    public function setPayId($pay_id)
    {
        $this->container['pay_id'] = $pay_id;

        return $this;
    }

    /**
     * Gets pay_id_type
     *
     * @return string|null
     */
    public function getPayIdType()
    {
        return $this->container['pay_id_type'];
    }

    /**
     * Sets pay_id_type
     *
     * @param string|null $pay_id_type pay_id_type
     *
     * @return self
     */
    public function setPayIdType($pay_id_type)
    {
        $this->container['pay_id_type'] = $pay_id_type;

        return $this;
    }

    /**
     * Gets end_to_end_id
     *
     * @return string|null
     */
    public function getEndToEndId()
    {
        return $this->container['end_to_end_id'];
    }

    /**
     * Sets end_to_end_id
     *
     * @param string|null $end_to_end_id end_to_end_id
     *
     * @return self
     */
    public function setEndToEndId($end_to_end_id)
    {
        $this->container['end_to_end_id'] = $end_to_end_id;

        return $this;
    }

    /**
     * Gets npp_payin_internal_id
     *
     * @return string|null
     */
    public function getNppPayinInternalId()
    {
        return $this->container['npp_payin_internal_id'];
    }

    /**
     * Sets npp_payin_internal_id
     *
     * @param string|null $npp_payin_internal_id npp_payin_internal_id
     *
     * @return self
     */
    public function setNppPayinInternalId($npp_payin_internal_id)
    {
        $this->container['npp_payin_internal_id'] = $npp_payin_internal_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


