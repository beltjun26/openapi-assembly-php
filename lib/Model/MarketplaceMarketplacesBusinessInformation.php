<?php
/**
 * MarketplaceMarketplacesBusinessInformation
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MarketplaceMarketplacesBusinessInformation Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class MarketplaceMarketplacesBusinessInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'marketplace_marketplaces_business_information';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'principal_name' => 'string',
        'principal_government_number' => 'string',
        'incorporation_date' => 'string',
        'bank_account_holder' => 'string',
        'bank_account_number' => 'string',
        'bank_routing_number' => 'string',
        'avg_transaction_value' => 'string',
        'monthly_transactions' => 'string',
        'monthly_disputes' => 'string',
        'monthly_refunds' => 'string',
        'monthly_chargebacks' => 'string',
        'unique_users' => 'string',
        'company_phone' => 'string',
        'company_country' => 'string',
        'transaction_time' => 'string',
        'payments_flow' => 'string',
        'business_model_description' => 'string',
        'customer_support_email' => 'string',
        'bank_name' => 'string',
        'bank_account_type' => 'string',
        'bank_holder_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'principal_name' => null,
        'principal_government_number' => null,
        'incorporation_date' => null,
        'bank_account_holder' => null,
        'bank_account_number' => null,
        'bank_routing_number' => null,
        'avg_transaction_value' => null,
        'monthly_transactions' => null,
        'monthly_disputes' => null,
        'monthly_refunds' => null,
        'monthly_chargebacks' => null,
        'unique_users' => null,
        'company_phone' => null,
        'company_country' => null,
        'transaction_time' => null,
        'payments_flow' => null,
        'business_model_description' => null,
        'customer_support_email' => null,
        'bank_name' => null,
        'bank_account_type' => null,
        'bank_holder_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'principal_name' => 'principal_name',
        'principal_government_number' => 'principal_government_number',
        'incorporation_date' => 'incorporation_date',
        'bank_account_holder' => 'bank_account_holder',
        'bank_account_number' => 'bank_account_number',
        'bank_routing_number' => 'bank_routing_number',
        'avg_transaction_value' => 'avg_transaction_value',
        'monthly_transactions' => 'monthly_transactions',
        'monthly_disputes' => 'monthly_disputes',
        'monthly_refunds' => 'monthly_refunds',
        'monthly_chargebacks' => 'monthly_chargebacks',
        'unique_users' => 'unique_users',
        'company_phone' => 'company_phone',
        'company_country' => 'company_country',
        'transaction_time' => 'transaction_time',
        'payments_flow' => 'payments_flow',
        'business_model_description' => 'business_model_description',
        'customer_support_email' => 'customer_support_email',
        'bank_name' => 'bank_name',
        'bank_account_type' => 'bank_account_type',
        'bank_holder_type' => 'bank_holder_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'principal_name' => 'setPrincipalName',
        'principal_government_number' => 'setPrincipalGovernmentNumber',
        'incorporation_date' => 'setIncorporationDate',
        'bank_account_holder' => 'setBankAccountHolder',
        'bank_account_number' => 'setBankAccountNumber',
        'bank_routing_number' => 'setBankRoutingNumber',
        'avg_transaction_value' => 'setAvgTransactionValue',
        'monthly_transactions' => 'setMonthlyTransactions',
        'monthly_disputes' => 'setMonthlyDisputes',
        'monthly_refunds' => 'setMonthlyRefunds',
        'monthly_chargebacks' => 'setMonthlyChargebacks',
        'unique_users' => 'setUniqueUsers',
        'company_phone' => 'setCompanyPhone',
        'company_country' => 'setCompanyCountry',
        'transaction_time' => 'setTransactionTime',
        'payments_flow' => 'setPaymentsFlow',
        'business_model_description' => 'setBusinessModelDescription',
        'customer_support_email' => 'setCustomerSupportEmail',
        'bank_name' => 'setBankName',
        'bank_account_type' => 'setBankAccountType',
        'bank_holder_type' => 'setBankHolderType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'principal_name' => 'getPrincipalName',
        'principal_government_number' => 'getPrincipalGovernmentNumber',
        'incorporation_date' => 'getIncorporationDate',
        'bank_account_holder' => 'getBankAccountHolder',
        'bank_account_number' => 'getBankAccountNumber',
        'bank_routing_number' => 'getBankRoutingNumber',
        'avg_transaction_value' => 'getAvgTransactionValue',
        'monthly_transactions' => 'getMonthlyTransactions',
        'monthly_disputes' => 'getMonthlyDisputes',
        'monthly_refunds' => 'getMonthlyRefunds',
        'monthly_chargebacks' => 'getMonthlyChargebacks',
        'unique_users' => 'getUniqueUsers',
        'company_phone' => 'getCompanyPhone',
        'company_country' => 'getCompanyCountry',
        'transaction_time' => 'getTransactionTime',
        'payments_flow' => 'getPaymentsFlow',
        'business_model_description' => 'getBusinessModelDescription',
        'customer_support_email' => 'getCustomerSupportEmail',
        'bank_name' => 'getBankName',
        'bank_account_type' => 'getBankAccountType',
        'bank_holder_type' => 'getBankHolderType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['principal_name'] = $data['principal_name'] ?? null;
        $this->container['principal_government_number'] = $data['principal_government_number'] ?? null;
        $this->container['incorporation_date'] = $data['incorporation_date'] ?? null;
        $this->container['bank_account_holder'] = $data['bank_account_holder'] ?? null;
        $this->container['bank_account_number'] = $data['bank_account_number'] ?? null;
        $this->container['bank_routing_number'] = $data['bank_routing_number'] ?? null;
        $this->container['avg_transaction_value'] = $data['avg_transaction_value'] ?? null;
        $this->container['monthly_transactions'] = $data['monthly_transactions'] ?? null;
        $this->container['monthly_disputes'] = $data['monthly_disputes'] ?? null;
        $this->container['monthly_refunds'] = $data['monthly_refunds'] ?? null;
        $this->container['monthly_chargebacks'] = $data['monthly_chargebacks'] ?? null;
        $this->container['unique_users'] = $data['unique_users'] ?? null;
        $this->container['company_phone'] = $data['company_phone'] ?? null;
        $this->container['company_country'] = $data['company_country'] ?? null;
        $this->container['transaction_time'] = $data['transaction_time'] ?? null;
        $this->container['payments_flow'] = $data['payments_flow'] ?? null;
        $this->container['business_model_description'] = $data['business_model_description'] ?? null;
        $this->container['customer_support_email'] = $data['customer_support_email'] ?? null;
        $this->container['bank_name'] = $data['bank_name'] ?? null;
        $this->container['bank_account_type'] = $data['bank_account_type'] ?? null;
        $this->container['bank_holder_type'] = $data['bank_holder_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets principal_name
     *
     * @return string|null
     */
    public function getPrincipalName()
    {
        return $this->container['principal_name'];
    }

    /**
     * Sets principal_name
     *
     * @param string|null $principal_name principal_name
     *
     * @return self
     */
    public function setPrincipalName($principal_name)
    {
        $this->container['principal_name'] = $principal_name;

        return $this;
    }

    /**
     * Gets principal_government_number
     *
     * @return string|null
     */
    public function getPrincipalGovernmentNumber()
    {
        return $this->container['principal_government_number'];
    }

    /**
     * Sets principal_government_number
     *
     * @param string|null $principal_government_number principal_government_number
     *
     * @return self
     */
    public function setPrincipalGovernmentNumber($principal_government_number)
    {
        $this->container['principal_government_number'] = $principal_government_number;

        return $this;
    }

    /**
     * Gets incorporation_date
     *
     * @return string|null
     */
    public function getIncorporationDate()
    {
        return $this->container['incorporation_date'];
    }

    /**
     * Sets incorporation_date
     *
     * @param string|null $incorporation_date incorporation_date
     *
     * @return self
     */
    public function setIncorporationDate($incorporation_date)
    {
        $this->container['incorporation_date'] = $incorporation_date;

        return $this;
    }

    /**
     * Gets bank_account_holder
     *
     * @return string|null
     */
    public function getBankAccountHolder()
    {
        return $this->container['bank_account_holder'];
    }

    /**
     * Sets bank_account_holder
     *
     * @param string|null $bank_account_holder bank_account_holder
     *
     * @return self
     */
    public function setBankAccountHolder($bank_account_holder)
    {
        $this->container['bank_account_holder'] = $bank_account_holder;

        return $this;
    }

    /**
     * Gets bank_account_number
     *
     * @return string|null
     */
    public function getBankAccountNumber()
    {
        return $this->container['bank_account_number'];
    }

    /**
     * Sets bank_account_number
     *
     * @param string|null $bank_account_number bank_account_number
     *
     * @return self
     */
    public function setBankAccountNumber($bank_account_number)
    {
        $this->container['bank_account_number'] = $bank_account_number;

        return $this;
    }

    /**
     * Gets bank_routing_number
     *
     * @return string|null
     */
    public function getBankRoutingNumber()
    {
        return $this->container['bank_routing_number'];
    }

    /**
     * Sets bank_routing_number
     *
     * @param string|null $bank_routing_number bank_routing_number
     *
     * @return self
     */
    public function setBankRoutingNumber($bank_routing_number)
    {
        $this->container['bank_routing_number'] = $bank_routing_number;

        return $this;
    }

    /**
     * Gets avg_transaction_value
     *
     * @return string|null
     */
    public function getAvgTransactionValue()
    {
        return $this->container['avg_transaction_value'];
    }

    /**
     * Sets avg_transaction_value
     *
     * @param string|null $avg_transaction_value avg_transaction_value
     *
     * @return self
     */
    public function setAvgTransactionValue($avg_transaction_value)
    {
        $this->container['avg_transaction_value'] = $avg_transaction_value;

        return $this;
    }

    /**
     * Gets monthly_transactions
     *
     * @return string|null
     */
    public function getMonthlyTransactions()
    {
        return $this->container['monthly_transactions'];
    }

    /**
     * Sets monthly_transactions
     *
     * @param string|null $monthly_transactions monthly_transactions
     *
     * @return self
     */
    public function setMonthlyTransactions($monthly_transactions)
    {
        $this->container['monthly_transactions'] = $monthly_transactions;

        return $this;
    }

    /**
     * Gets monthly_disputes
     *
     * @return string|null
     */
    public function getMonthlyDisputes()
    {
        return $this->container['monthly_disputes'];
    }

    /**
     * Sets monthly_disputes
     *
     * @param string|null $monthly_disputes monthly_disputes
     *
     * @return self
     */
    public function setMonthlyDisputes($monthly_disputes)
    {
        $this->container['monthly_disputes'] = $monthly_disputes;

        return $this;
    }

    /**
     * Gets monthly_refunds
     *
     * @return string|null
     */
    public function getMonthlyRefunds()
    {
        return $this->container['monthly_refunds'];
    }

    /**
     * Sets monthly_refunds
     *
     * @param string|null $monthly_refunds monthly_refunds
     *
     * @return self
     */
    public function setMonthlyRefunds($monthly_refunds)
    {
        $this->container['monthly_refunds'] = $monthly_refunds;

        return $this;
    }

    /**
     * Gets monthly_chargebacks
     *
     * @return string|null
     */
    public function getMonthlyChargebacks()
    {
        return $this->container['monthly_chargebacks'];
    }

    /**
     * Sets monthly_chargebacks
     *
     * @param string|null $monthly_chargebacks monthly_chargebacks
     *
     * @return self
     */
    public function setMonthlyChargebacks($monthly_chargebacks)
    {
        $this->container['monthly_chargebacks'] = $monthly_chargebacks;

        return $this;
    }

    /**
     * Gets unique_users
     *
     * @return string|null
     */
    public function getUniqueUsers()
    {
        return $this->container['unique_users'];
    }

    /**
     * Sets unique_users
     *
     * @param string|null $unique_users unique_users
     *
     * @return self
     */
    public function setUniqueUsers($unique_users)
    {
        $this->container['unique_users'] = $unique_users;

        return $this;
    }

    /**
     * Gets company_phone
     *
     * @return string|null
     */
    public function getCompanyPhone()
    {
        return $this->container['company_phone'];
    }

    /**
     * Sets company_phone
     *
     * @param string|null $company_phone company_phone
     *
     * @return self
     */
    public function setCompanyPhone($company_phone)
    {
        $this->container['company_phone'] = $company_phone;

        return $this;
    }

    /**
     * Gets company_country
     *
     * @return string|null
     */
    public function getCompanyCountry()
    {
        return $this->container['company_country'];
    }

    /**
     * Sets company_country
     *
     * @param string|null $company_country company_country
     *
     * @return self
     */
    public function setCompanyCountry($company_country)
    {
        $this->container['company_country'] = $company_country;

        return $this;
    }

    /**
     * Gets transaction_time
     *
     * @return string|null
     */
    public function getTransactionTime()
    {
        return $this->container['transaction_time'];
    }

    /**
     * Sets transaction_time
     *
     * @param string|null $transaction_time transaction_time
     *
     * @return self
     */
    public function setTransactionTime($transaction_time)
    {
        $this->container['transaction_time'] = $transaction_time;

        return $this;
    }

    /**
     * Gets payments_flow
     *
     * @return string|null
     */
    public function getPaymentsFlow()
    {
        return $this->container['payments_flow'];
    }

    /**
     * Sets payments_flow
     *
     * @param string|null $payments_flow payments_flow
     *
     * @return self
     */
    public function setPaymentsFlow($payments_flow)
    {
        $this->container['payments_flow'] = $payments_flow;

        return $this;
    }

    /**
     * Gets business_model_description
     *
     * @return string|null
     */
    public function getBusinessModelDescription()
    {
        return $this->container['business_model_description'];
    }

    /**
     * Sets business_model_description
     *
     * @param string|null $business_model_description business_model_description
     *
     * @return self
     */
    public function setBusinessModelDescription($business_model_description)
    {
        $this->container['business_model_description'] = $business_model_description;

        return $this;
    }

    /**
     * Gets customer_support_email
     *
     * @return string|null
     */
    public function getCustomerSupportEmail()
    {
        return $this->container['customer_support_email'];
    }

    /**
     * Sets customer_support_email
     *
     * @param string|null $customer_support_email customer_support_email
     *
     * @return self
     */
    public function setCustomerSupportEmail($customer_support_email)
    {
        $this->container['customer_support_email'] = $customer_support_email;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string|null
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string|null $bank_name bank_name
     *
     * @return self
     */
    public function setBankName($bank_name)
    {
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets bank_account_type
     *
     * @return string|null
     */
    public function getBankAccountType()
    {
        return $this->container['bank_account_type'];
    }

    /**
     * Sets bank_account_type
     *
     * @param string|null $bank_account_type bank_account_type
     *
     * @return self
     */
    public function setBankAccountType($bank_account_type)
    {
        $this->container['bank_account_type'] = $bank_account_type;

        return $this;
    }

    /**
     * Gets bank_holder_type
     *
     * @return string|null
     */
    public function getBankHolderType()
    {
        return $this->container['bank_holder_type'];
    }

    /**
     * Sets bank_holder_type
     *
     * @param string|null $bank_holder_type bank_holder_type
     *
     * @return self
     */
    public function setBankHolderType($bank_holder_type)
    {
        $this->container['bank_holder_type'] = $bank_holder_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


