<?php
/**
 * SingleRoutingNumberRoutingNumber
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SingleRoutingNumberRoutingNumber Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SingleRoutingNumberRoutingNumber implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'single_routing_number_routing_number';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'routing_number' => 'string',
        'customer_name' => 'string',
        'address' => 'string',
        'city' => 'string',
        'state_code' => 'string',
        'zip' => 'string',
        'zip_extension' => 'string',
        'phone_area_code' => 'string',
        'phone_prefix' => 'string',
        'phone_suffix' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'routing_number' => null,
        'customer_name' => null,
        'address' => null,
        'city' => null,
        'state_code' => null,
        'zip' => null,
        'zip_extension' => null,
        'phone_area_code' => null,
        'phone_prefix' => null,
        'phone_suffix' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'routing_number' => 'routing_number',
        'customer_name' => 'customer_name',
        'address' => 'address',
        'city' => 'city',
        'state_code' => 'state_code',
        'zip' => 'zip',
        'zip_extension' => 'zip_extension',
        'phone_area_code' => 'phone_area_code',
        'phone_prefix' => 'phone_prefix',
        'phone_suffix' => 'phone_suffix'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'routing_number' => 'setRoutingNumber',
        'customer_name' => 'setCustomerName',
        'address' => 'setAddress',
        'city' => 'setCity',
        'state_code' => 'setStateCode',
        'zip' => 'setZip',
        'zip_extension' => 'setZipExtension',
        'phone_area_code' => 'setPhoneAreaCode',
        'phone_prefix' => 'setPhonePrefix',
        'phone_suffix' => 'setPhoneSuffix'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'routing_number' => 'getRoutingNumber',
        'customer_name' => 'getCustomerName',
        'address' => 'getAddress',
        'city' => 'getCity',
        'state_code' => 'getStateCode',
        'zip' => 'getZip',
        'zip_extension' => 'getZipExtension',
        'phone_area_code' => 'getPhoneAreaCode',
        'phone_prefix' => 'getPhonePrefix',
        'phone_suffix' => 'getPhoneSuffix'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['routing_number'] = $data['routing_number'] ?? null;
        $this->container['customer_name'] = $data['customer_name'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['state_code'] = $data['state_code'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
        $this->container['zip_extension'] = $data['zip_extension'] ?? null;
        $this->container['phone_area_code'] = $data['phone_area_code'] ?? null;
        $this->container['phone_prefix'] = $data['phone_prefix'] ?? null;
        $this->container['phone_suffix'] = $data['phone_suffix'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets routing_number
     *
     * @return string|null
     */
    public function getRoutingNumber()
    {
        return $this->container['routing_number'];
    }

    /**
     * Sets routing_number
     *
     * @param string|null $routing_number routing_number
     *
     * @return self
     */
    public function setRoutingNumber($routing_number)
    {
        $this->container['routing_number'] = $routing_number;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string|null
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string|null $customer_name customer_name
     *
     * @return self
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state_code
     *
     * @return string|null
     */
    public function getStateCode()
    {
        return $this->container['state_code'];
    }

    /**
     * Sets state_code
     *
     * @param string|null $state_code state_code
     *
     * @return self
     */
    public function setStateCode($state_code)
    {
        $this->container['state_code'] = $state_code;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip zip
     *
     * @return self
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets zip_extension
     *
     * @return string|null
     */
    public function getZipExtension()
    {
        return $this->container['zip_extension'];
    }

    /**
     * Sets zip_extension
     *
     * @param string|null $zip_extension zip_extension
     *
     * @return self
     */
    public function setZipExtension($zip_extension)
    {
        $this->container['zip_extension'] = $zip_extension;

        return $this;
    }

    /**
     * Gets phone_area_code
     *
     * @return string|null
     */
    public function getPhoneAreaCode()
    {
        return $this->container['phone_area_code'];
    }

    /**
     * Sets phone_area_code
     *
     * @param string|null $phone_area_code phone_area_code
     *
     * @return self
     */
    public function setPhoneAreaCode($phone_area_code)
    {
        $this->container['phone_area_code'] = $phone_area_code;

        return $this;
    }

    /**
     * Gets phone_prefix
     *
     * @return string|null
     */
    public function getPhonePrefix()
    {
        return $this->container['phone_prefix'];
    }

    /**
     * Sets phone_prefix
     *
     * @param string|null $phone_prefix phone_prefix
     *
     * @return self
     */
    public function setPhonePrefix($phone_prefix)
    {
        $this->container['phone_prefix'] = $phone_prefix;

        return $this;
    }

    /**
     * Gets phone_suffix
     *
     * @return string|null
     */
    public function getPhoneSuffix()
    {
        return $this->container['phone_suffix'];
    }

    /**
     * Sets phone_suffix
     *
     * @param string|null $phone_suffix phone_suffix
     *
     * @return self
     */
    public function setPhoneSuffix($phone_suffix)
    {
        $this->container['phone_suffix'] = $phone_suffix;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


