<?php
/**
 * UserRequestBody
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserRequestBody Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class UserRequestBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'user_requestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'mobile' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'state' => 'string',
        'city' => 'string',
        'zip' => 'string',
        'country' => 'string',
        'dob' => 'string',
        'government_number' => 'string',
        'drivers_license_number' => 'string',
        'drivers_license_state' => 'string',
        'ip_address' => 'string',
        'logo_url' => 'string',
        'color_1' => 'string',
        'color_2' => 'string',
        'custom_descriptor' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'first_name' => null,
        'last_name' => null,
        'email' => null,
        'mobile' => null,
        'address_line1' => null,
        'address_line2' => null,
        'state' => null,
        'city' => null,
        'zip' => null,
        'country' => null,
        'dob' => null,
        'government_number' => null,
        'drivers_license_number' => null,
        'drivers_license_state' => null,
        'ip_address' => null,
        'logo_url' => null,
        'color_1' => null,
        'color_2' => null,
        'custom_descriptor' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'email' => 'email',
        'mobile' => 'mobile',
        'address_line1' => 'address_line1',
        'address_line2' => 'address_line2',
        'state' => 'state',
        'city' => 'city',
        'zip' => 'zip',
        'country' => 'country',
        'dob' => 'dob',
        'government_number' => 'government_number',
        'drivers_license_number' => 'drivers_license_number',
        'drivers_license_state' => 'drivers_license_state',
        'ip_address' => 'ip_address',
        'logo_url' => 'logo_url',
        'color_1' => 'color_1',
        'color_2' => 'color_2',
        'custom_descriptor' => 'custom_descriptor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'mobile' => 'setMobile',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'state' => 'setState',
        'city' => 'setCity',
        'zip' => 'setZip',
        'country' => 'setCountry',
        'dob' => 'setDob',
        'government_number' => 'setGovernmentNumber',
        'drivers_license_number' => 'setDriversLicenseNumber',
        'drivers_license_state' => 'setDriversLicenseState',
        'ip_address' => 'setIpAddress',
        'logo_url' => 'setLogoUrl',
        'color_1' => 'setColor1',
        'color_2' => 'setColor2',
        'custom_descriptor' => 'setCustomDescriptor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'mobile' => 'getMobile',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'state' => 'getState',
        'city' => 'getCity',
        'zip' => 'getZip',
        'country' => 'getCountry',
        'dob' => 'getDob',
        'government_number' => 'getGovernmentNumber',
        'drivers_license_number' => 'getDriversLicenseNumber',
        'drivers_license_state' => 'getDriversLicenseState',
        'ip_address' => 'getIpAddress',
        'logo_url' => 'getLogoUrl',
        'color_1' => 'getColor1',
        'color_2' => 'getColor2',
        'custom_descriptor' => 'getCustomDescriptor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? 'buyer-1556506027';
        $this->container['first_name'] = $data['first_name'] ?? 'Neol1556506027';
        $this->container['last_name'] = $data['last_name'] ?? 'Calangi';
        $this->container['email'] = $data['email'] ?? 'neol.calangi+buyer1556506027@promisepay.com';
        $this->container['mobile'] = $data['mobile'] ?? null;
        $this->container['address_line1'] = $data['address_line1'] ?? null;
        $this->container['address_line2'] = $data['address_line2'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
        $this->container['country'] = $data['country'] ?? 'AUS';
        $this->container['dob'] = $data['dob'] ?? null;
        $this->container['government_number'] = $data['government_number'] ?? null;
        $this->container['drivers_license_number'] = $data['drivers_license_number'] ?? null;
        $this->container['drivers_license_state'] = $data['drivers_license_state'] ?? null;
        $this->container['ip_address'] = $data['ip_address'] ?? null;
        $this->container['logo_url'] = $data['logo_url'] ?? null;
        $this->container['color_1'] = $data['color_1'] ?? null;
        $this->container['color_2'] = $data['color_2'] ?? null;
        $this->container['custom_descriptor'] = $data['custom_descriptor'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique ID that can be generated by the platform. Cannot contain ’.’  character. Contact Assembly support if you want user IDs to be generated automatically.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First name of the user
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last name of the user
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email of the user. Unique to platform.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string|null
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string|null $mobile International number format. Include ’+’ and no spaces.
     *
     * @return self
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string|null $address_line1 First line of the user address
     *
     * @return self
     */
    public function setAddressLine1($address_line1)
    {
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string|null $address_line2 Second line of the user address
     *
     * @return self
     */
    public function setAddressLine2($address_line2)
    {
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State section of the user address
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City section of the user address
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip Postcode
     *
     * @return self
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements) country code (3 char)
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets dob
     *
     * @return string|null
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     *
     * @param string|null $dob Date of Birth (DD/MM/YYYY).
     *
     * @return self
     */
    public function setDob($dob)
    {
        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets government_number
     *
     * @return string|null
     */
    public function getGovernmentNumber()
    {
        return $this->container['government_number'];
    }

    /**
     * Sets government_number
     *
     * @param string|null $government_number Generic parameter to capture important user verification data. eg. SSN for US users, TFN for AU users.
     *
     * @return self
     */
    public function setGovernmentNumber($government_number)
    {
        $this->container['government_number'] = $government_number;

        return $this;
    }

    /**
     * Gets drivers_license_number
     *
     * @return string|null
     */
    public function getDriversLicenseNumber()
    {
        return $this->container['drivers_license_number'];
    }

    /**
     * Sets drivers_license_number
     *
     * @param string|null $drivers_license_number Driving license number of the user
     *
     * @return self
     */
    public function setDriversLicenseNumber($drivers_license_number)
    {
        $this->container['drivers_license_number'] = $drivers_license_number;

        return $this;
    }

    /**
     * Gets drivers_license_state
     *
     * @return string|null
     */
    public function getDriversLicenseState()
    {
        return $this->container['drivers_license_state'];
    }

    /**
     * Sets drivers_license_state
     *
     * @param string|null $drivers_license_state State section of the user's driving license
     *
     * @return self
     */
    public function setDriversLicenseState($drivers_license_state)
    {
        $this->container['drivers_license_state'] = $drivers_license_state;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address IP address
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string|null $logo_url URL link to the logo
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets color_1
     *
     * @return string|null
     */
    public function getColor1()
    {
        return $this->container['color_1'];
    }

    /**
     * Sets color_1
     *
     * @param string|null $color_1 Color code number 1
     *
     * @return self
     */
    public function setColor1($color_1)
    {
        $this->container['color_1'] = $color_1;

        return $this;
    }

    /**
     * Gets color_2
     *
     * @return string|null
     */
    public function getColor2()
    {
        return $this->container['color_2'];
    }

    /**
     * Sets color_2
     *
     * @param string|null $color_2 Color code number 2
     *
     * @return self
     */
    public function setColor2($color_2)
    {
        $this->container['color_2'] = $color_2;

        return $this;
    }

    /**
     * Gets custom_descriptor
     *
     * @return string|null
     */
    public function getCustomDescriptor()
    {
        return $this->container['custom_descriptor'];
    }

    /**
     * Sets custom_descriptor
     *
     * @param string|null $custom_descriptor When custom_descriptors are enabled, this is the information to appear on bundle direct debit statements (which show the buyer's custom_descriptor) as well as international wire payout, direct credit and PayPal payout statements (which show the seller's custom_descriptor)
     *
     * @return self
     */
    public function setCustomDescriptor($custom_descriptor)
    {
        $this->container['custom_descriptor'] = $custom_descriptor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


