<?php
/**
 * Transaction
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Assembly API
 *
 * Assembly (formely PromisePay) is a powerful payments engine custom-built for platforms and marketplaces.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@assemblypayments.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Transaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'description' => 'string',
        'payee_name' => 'string',
        'type' => 'string',
        'type_method' => 'string',
        'state' => 'string',
        'user_id' => 'string',
        'user_name' => 'string',
        'item_name' => 'string',
        'dynamic_descriptor' => 'string',
        'account_id' => 'string',
        'account_type' => 'string',
        'amount' => 'string',
        'currency' => 'string',
        'debit_credit' => 'string',
        'marketplace' => '\OpenAPI\Client\Model\TransactionMarketplace',
        'related' => '\OpenAPI\Client\Model\TransactionRelated',
        'payee_details' => '\OpenAPI\Client\Model\TransactionPayeeDetails',
        'links' => '\OpenAPI\Client\Model\TransactionLinks'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'description' => null,
        'payee_name' => null,
        'type' => null,
        'type_method' => null,
        'state' => null,
        'user_id' => null,
        'user_name' => null,
        'item_name' => null,
        'dynamic_descriptor' => null,
        'account_id' => null,
        'account_type' => null,
        'amount' => null,
        'currency' => null,
        'debit_credit' => null,
        'marketplace' => null,
        'related' => null,
        'payee_details' => null,
        'links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'description' => 'description',
        'payee_name' => 'payee_name',
        'type' => 'type',
        'type_method' => 'type_method',
        'state' => 'state',
        'user_id' => 'user_id',
        'user_name' => 'user_name',
        'item_name' => 'item_name',
        'dynamic_descriptor' => 'dynamic_descriptor',
        'account_id' => 'account_id',
        'account_type' => 'account_type',
        'amount' => 'amount',
        'currency' => 'currency',
        'debit_credit' => 'debit_credit',
        'marketplace' => 'marketplace',
        'related' => 'related',
        'payee_details' => 'payee_details',
        'links' => 'links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'description' => 'setDescription',
        'payee_name' => 'setPayeeName',
        'type' => 'setType',
        'type_method' => 'setTypeMethod',
        'state' => 'setState',
        'user_id' => 'setUserId',
        'user_name' => 'setUserName',
        'item_name' => 'setItemName',
        'dynamic_descriptor' => 'setDynamicDescriptor',
        'account_id' => 'setAccountId',
        'account_type' => 'setAccountType',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'debit_credit' => 'setDebitCredit',
        'marketplace' => 'setMarketplace',
        'related' => 'setRelated',
        'payee_details' => 'setPayeeDetails',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'description' => 'getDescription',
        'payee_name' => 'getPayeeName',
        'type' => 'getType',
        'type_method' => 'getTypeMethod',
        'state' => 'getState',
        'user_id' => 'getUserId',
        'user_name' => 'getUserName',
        'item_name' => 'getItemName',
        'dynamic_descriptor' => 'getDynamicDescriptor',
        'account_id' => 'getAccountId',
        'account_type' => 'getAccountType',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'debit_credit' => 'getDebitCredit',
        'marketplace' => 'getMarketplace',
        'related' => 'getRelated',
        'payee_details' => 'getPayeeDetails',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['payee_name'] = $data['payee_name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['type_method'] = $data['type_method'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['user_name'] = $data['user_name'] ?? null;
        $this->container['item_name'] = $data['item_name'] ?? null;
        $this->container['dynamic_descriptor'] = $data['dynamic_descriptor'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['account_type'] = $data['account_type'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['debit_credit'] = $data['debit_credit'] ?? null;
        $this->container['marketplace'] = $data['marketplace'] ?? null;
        $this->container['related'] = $data['related'] ?? null;
        $this->container['payee_details'] = $data['payee_details'] ?? null;
        $this->container['links'] = $data['links'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets payee_name
     *
     * @return string|null
     */
    public function getPayeeName()
    {
        return $this->container['payee_name'];
    }

    /**
     * Sets payee_name
     *
     * @param string|null $payee_name payee_name
     *
     * @return self
     */
    public function setPayeeName($payee_name)
    {
        $this->container['payee_name'] = $payee_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets type_method
     *
     * @return string|null
     */
    public function getTypeMethod()
    {
        return $this->container['type_method'];
    }

    /**
     * Sets type_method
     *
     * @param string|null $type_method type_method
     *
     * @return self
     */
    public function setTypeMethod($type_method)
    {
        $this->container['type_method'] = $type_method;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string|null $user_name user_name
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets item_name
     *
     * @return string|null
     */
    public function getItemName()
    {
        return $this->container['item_name'];
    }

    /**
     * Sets item_name
     *
     * @param string|null $item_name item_name
     *
     * @return self
     */
    public function setItemName($item_name)
    {
        $this->container['item_name'] = $item_name;

        return $this;
    }

    /**
     * Gets dynamic_descriptor
     *
     * @return string|null
     */
    public function getDynamicDescriptor()
    {
        return $this->container['dynamic_descriptor'];
    }

    /**
     * Sets dynamic_descriptor
     *
     * @param string|null $dynamic_descriptor dynamic_descriptor
     *
     * @return self
     */
    public function setDynamicDescriptor($dynamic_descriptor)
    {
        $this->container['dynamic_descriptor'] = $dynamic_descriptor;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type account_type
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets debit_credit
     *
     * @return string|null
     */
    public function getDebitCredit()
    {
        return $this->container['debit_credit'];
    }

    /**
     * Sets debit_credit
     *
     * @param string|null $debit_credit debit_credit
     *
     * @return self
     */
    public function setDebitCredit($debit_credit)
    {
        $this->container['debit_credit'] = $debit_credit;

        return $this;
    }

    /**
     * Gets marketplace
     *
     * @return \OpenAPI\Client\Model\TransactionMarketplace|null
     */
    public function getMarketplace()
    {
        return $this->container['marketplace'];
    }

    /**
     * Sets marketplace
     *
     * @param \OpenAPI\Client\Model\TransactionMarketplace|null $marketplace marketplace
     *
     * @return self
     */
    public function setMarketplace($marketplace)
    {
        $this->container['marketplace'] = $marketplace;

        return $this;
    }

    /**
     * Gets related
     *
     * @return \OpenAPI\Client\Model\TransactionRelated|null
     */
    public function getRelated()
    {
        return $this->container['related'];
    }

    /**
     * Sets related
     *
     * @param \OpenAPI\Client\Model\TransactionRelated|null $related related
     *
     * @return self
     */
    public function setRelated($related)
    {
        $this->container['related'] = $related;

        return $this;
    }

    /**
     * Gets payee_details
     *
     * @return \OpenAPI\Client\Model\TransactionPayeeDetails|null
     */
    public function getPayeeDetails()
    {
        return $this->container['payee_details'];
    }

    /**
     * Sets payee_details
     *
     * @param \OpenAPI\Client\Model\TransactionPayeeDetails|null $payee_details payee_details
     *
     * @return self
     */
    public function setPayeeDetails($payee_details)
    {
        $this->container['payee_details'] = $payee_details;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \OpenAPI\Client\Model\TransactionLinks|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \OpenAPI\Client\Model\TransactionLinks|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


